paths:
  /lists/{listId}/cards:
    get:
      summary: 카드 목록 조회
      description: 특정 리스트의 모든 카드 목록을 조회합니다.
      operationId: getCards
      tags:
        - Card
      security:
      - OperationBased: [read_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/listIdParam'
      responses:
        '200':
          description: 카드 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '../components/schemas.yaml#/schemas/Card'
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
          
  /checklists/{checklistId}/items/positions:
    put:
      summary: 체크리스트 항목 위치 일괄 수정
      description: 특정 체크리스트의 여러 항목 위치를 한 번에 수정합니다.
      operationId: updateChecklistItemPositions
      tags:
        - ChecklistItem
      security:
        - OperationBased: [write_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/checklistIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - itemPositions
              properties:
                itemPositions:
                  type: array
                  items:
                    type: object
                    required:
                      - id
                      - position
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: 체크리스트 항목 ID
                      position:
                        type: integer
                        description: 항목 새 위치
      responses:
        '200':
          description: 체크리스트 항목 위치 수정 성공
        '400':
          $ref: '../components/responses.yaml#/responses/Error400'
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
                
  /cards/{cardId}:
    get:
      summary: 카드 상세 조회
      description: 특정 카드의 상세 정보를 조회합니다.
      operationId: getCard
      tags:
        - Card
      security:
        - OperationBased: [read_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/cardIdParam'
      responses:
        '200':
          description: 카드 조회 성공
          content:
            application/json:
              schema:
                $ref: '../components/schemas.yaml#/schemas/Card'
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
    put:
      summary: 카드 수정
      description: 특정 카드의 정보를 수정합니다.
      operationId: updateCard
      tags:
        - Card
      security:
        - OperationBased: [write_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/cardIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 카드 제목
                description:
                  type: string
                  description: 카드 설명
                position:
                  type: integer
                  description: 카드 위치
                dueDate:
                  type: string
                  format: date-time
                  description: 카드 마감일
                coverImage:
                  type: string
                  format: uri
                  description: 카드 커버 이미지 URL
                isArchived:
                  type: boolean
                  description: 카드 보관 여부
      responses:
        '200':
          description: 카드 수정 성공
          content:
            application/json:
              schema:
                $ref: '../components/schemas.yaml#/schemas/Card'
        '400':
          $ref: '../components/responses.yaml#/responses/Error400'
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
    delete:
      summary: 카드 삭제
      description: 특정 카드를 삭제합니다.
      operationId: deleteCard
      tags:
        - Card
      security:
        - OperationBased: [write_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/cardIdParam'
      responses:
        '204':
          description: 카드 삭제 성공
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
                
  /cards/{cardId}/move:
    put:
      summary: 카드 이동
      description: 특정 카드를 다른 리스트로 이동합니다.
      operationId: moveCard
      tags:
        - Card
      security:
        - OperationBased: [write_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/cardIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - listId
              properties:
                listId:
                  type: string
                  format: uuid
                  description: 이동할 리스트 ID
                position:
                  type: integer
                  description: 이동할 위치 (기본값은 가장 마지막)
      responses:
        '200':
          description: 카드 이동 성공
          content:
            application/json:
              schema:
                $ref: '../components/schemas.yaml#/schemas/Card'
        '400':
          $ref: '../components/responses.yaml#/responses/Error400'
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
                
  /lists/{listId}/cards/positions:
    put:
      summary: 카드 위치 일괄 수정
      description: 특정 리스트의 여러 카드 위치를 한 번에 수정합니다.
      operationId: updateCardPositions
      tags:
        - Card
      security:
        - OperationBased: [write_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/listIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cardPositions
              properties:
                cardPositions:
                  type: array
                  items:
                    type: object
                    required:
                      - id
                      - position
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: 카드 ID
                      position:
                        type: integer
                        description: 카드 새 위치
      responses:
        '200':
          description: 카드 위치 수정 성공
        '400':
          $ref: '../components/responses.yaml#/responses/Error400'
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
  
  /cards/{cardId}/labels/{labelId}:
    post:
      summary: 카드에 라벨 추가
      description: 특정 카드에 라벨을 추가합니다.
      operationId: addLabel
      tags:
        - Label
      security:
        - OperationBased: [write_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/cardIdParam'
        - $ref: '../components/parameters.yaml#/parameters/labelIdParam'
      responses:
        '201':
          description: 라벨 추가 성공
        '400':
          $ref: '../components/responses.yaml#/responses/Error400'
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
    delete:
      summary: 카드에서 라벨 제거
      description: 특정 카드에서 라벨을 제거합니다.
      operationId: removeLabel
      tags:
        - Label
      security:
        - OperationBased: [write_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/cardIdParam'
        - $ref: '../components/parameters.yaml#/parameters/labelIdParam'
      responses:
        '204':
          description: 라벨 제거 성공
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
  
  /cards/{cardId}/attachments:
    get:
      summary: 첨부파일 목록 조회
      description: 특정 카드의 모든 첨부파일 목록을 조회합니다.
      operationId: getAttachments
      tags:
        - Attachment
      security:
        - OperationBased: [read_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/cardIdParam'
      responses:
        '200':
          description: 첨부파일 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '../components/schemas.yaml#/schemas/Attachment'
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
    post:
      summary: 첨부파일 업로드
      description: 특정 카드에 새 첨부파일을 업로드합니다.
      operationId: uploadAttachment
      tags:
        - Attachment
      security:
        - OperationBased: [write_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/cardIdParam'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: 업로드할 파일
                name:
                  type: string
                  description: 첨부파일 이름 (제공하지 않으면 파일명 사용)
      responses:
        '201':
          description: 첨부파일 업로드 성공
          content:
            application/json:
              schema:
                $ref: '../components/schemas.yaml#/schemas/Attachment'
        '400':
          $ref: '../components/responses.yaml#/responses/Error400'
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
                
  /attachments/{attachmentId}:
    delete:
      summary: 첨부파일 삭제
      description: 특정 첨부파일을 삭제합니다.
      operationId: deleteAttachment
      tags:
        - Attachment
      security:
        - OperationBased: [write_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/attachmentIdParam'
      responses:
        '204':
          description: 첨부파일 삭제 성공
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
  
  /cards/{cardId}/comments:
    get:
      summary: 댓글 목록 조회
      description: 특정 카드의 모든 댓글 목록을 조회합니다.
      operationId: getComments
      tags:
        - Comment
      security:
        - OperationBased: [read_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/cardIdParam'
      responses:
        '200':
          description: 댓글 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '../components/schemas.yaml#/schemas/Comment'
                    - type: object
                      properties:
                        account:
                          $ref: '../components/schemas.yaml#/schemas/Account'
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
    post:
      summary: 댓글 작성
      description: 특정 카드에 새 댓글을 작성합니다.
      operationId: createComment
      tags:
        - Comment
      security:
        - OperationBased: [write_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/cardIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: 댓글 내용
      responses:
        '201':
          description: 댓글 작성 성공
          content:
            application/json:
              schema:
                $ref: '../components/schemas.yaml#/schemas/Comment'
        '400':
          $ref: '../components/responses.yaml#/responses/Error400'
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'

  /comments/{commentId}:
    put:
      summary: 댓글 수정
      description: 특정 댓글을 수정합니다.
      operationId: updateComment
      tags:
        - Comment
      security:
        - OperationBased: [write_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/commentIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: 수정할 댓글 내용
      responses:
        '200':
          description: 댓글 수정 성공
          content:
            application/json:
              schema:
                $ref: '../components/schemas.yaml#/schemas/Comment'
        '400':
          $ref: '../components/responses.yaml#/responses/Error400'
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
    delete:
      summary: 댓글 삭제
      description: 특정 댓글을 삭제합니다.
      operationId: deleteComment
      tags:
        - Comment
      security:
        - OperationBased: [write_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/commentIdParam'
      responses:
        '204':
          description: 댓글 삭제 성공
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
  
  /cards/{cardId}/checklists:
    get:
      summary: 체크리스트 목록 조회
      description: 특정 카드의 모든 체크리스트 목록을 조회합니다.
      operationId: getChecklists
      tags:
        - Checklist
      security:
        - OperationBased: [read_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/cardIdParam'
      responses:
        '200':
          description: 체크리스트 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '../components/schemas.yaml#/schemas/Checklist'
                    - type: object
                      properties:
                        items:
                          type: array
                          items:
                            $ref: '../components/schemas.yaml#/schemas/ChecklistItem'
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
    post:
      summary: 체크리스트 생성
      description: 특정 카드에 새 체크리스트를 생성합니다.
      operationId: createChecklist
      tags:
        - Checklist
      security:
        - OperationBased: [write_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/cardIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  description: 체크리스트 제목
                position:
                  type: integer
                  description: 체크리스트 위치 (기본값은 가장 마지막)
      responses:
        '201':
          description: 체크리스트 생성 성공
          content:
            application/json:
              schema:
                $ref: '../components/schemas.yaml#/schemas/Checklist'
        '400':
          $ref: '../components/responses.yaml#/responses/Error400'
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
                
  /checklists/{checklistId}:
    put:
      summary: 체크리스트 수정
      description: 특정 체크리스트의 정보를 수정합니다.
      operationId: updateChecklist
      tags:
        - Checklist
      security:
        - OperationBased: [write_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/checklistIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 체크리스트 제목
                position:
                  type: integer
                  description: 체크리스트 위치
      responses:
        '200':
          description: 체크리스트 수정 성공
          content:
            application/json:
              schema:
                $ref: '../components/schemas.yaml#/schemas/Checklist'
        '400':
          $ref: '../components/responses.yaml#/responses/Error400'
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
    delete:
      summary: 체크리스트 삭제
      description: 특정 체크리스트를 삭제합니다.
      operationId: deleteChecklist
      tags:
        - Checklist
      security:
        - OperationBased: [write_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/checklistIdParam'
      responses:
        '204':
          description: 체크리스트 삭제 성공
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
  
  /checklists/{checklistId}/items:
    get:
      summary: 체크리스트 항목 목록 조회
      description: 특정 체크리스트의 모든 항목 목록을 조회합니다.
      operationId: getChecklistItems
      tags:
        - ChecklistItem
      security:
        - OperationBased: [read_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/checklistIdParam'
      responses:
        '200':
          description: 체크리스트 항목 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '../components/schemas.yaml#/schemas/ChecklistItem'
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
    post:
      summary: 체크리스트 항목 생성
      description: 특정 체크리스트에 새 항목을 생성합니다.
      operationId: createChecklistItem
      tags:
        - ChecklistItem
      security:
        - OperationBased: [write_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/checklistIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: 체크리스트 항목 내용
                isCompleted:
                  type: boolean
                  description: 완료 여부
                position:
                  type: integer
                  description: 항목 위치 (기본값은 가장 마지막)
      responses:
        '201':
          description: 체크리스트 항목 생성 성공
          content:
            application/json:
              schema:
                $ref: '../components/schemas.yaml#/schemas/ChecklistItem'
        '400':
          $ref: '../components/responses.yaml#/responses/Error400'
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
                
  /checklist-items/{itemId}:
    put:
      summary: 체크리스트 항목 수정
      description: 특정 체크리스트 항목을 수정합니다.
      operationId: updateChecklistItem
      tags:
        - ChecklistItem
      security:
        - OperationBased: [write_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/checklistItemIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: 체크리스트 항목 내용
                isCompleted:
                  type: boolean
                  description: 완료 여부
                position:
                  type: integer
                  description: 항목 위치
      responses:
        '200':
          description: 체크리스트 항목 수정 성공
          content:
            application/json:
              schema:
                $ref: '../components/schemas.yaml#/schemas/ChecklistItem'
        '400':
          $ref: '../components/responses.yaml#/responses/Error400'
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'
        '404':
          $ref: '../components/responses.yaml#/responses/Error404'
    delete:
      summary: 체크리스트 항목 삭제
      description: 특정 체크리스트 항목을 삭제합니다.
      operationId: deleteChecklistItem
      tags:
        - ChecklistItem
      security:
        - OperationBased: [write_trello]
      parameters:
        - $ref: '../components/parameters.yaml#/parameters/checklistItemIdParam'
      responses:
        '204':
          description: 체크리스트 항목 삭제 성공
        '401':
          $ref: '../components/responses.yaml#/responses/Error401'
        '403':
          $ref: '../components/responses.yaml#/responses/Error403'