openapi: 3.0.3
info:
  title: 트렐로 클론 API
  description: 트렐로 유사 서비스의 API
  version: 1.0.0
  contact:
    name: dongwon.kwak
servers:
  - url: 'http://localhost:8080/v1'
    description: 메인 API 서버
tags:
  - name: Auth
    description: 인증 및 계정 관련 엔드포인트
  - name: Account
    description: 사용자 계정 관리 엔드포인트
  - name: Workspace
    description: 작업공간 관리 엔드포인트
  - name: WorkspaceMember
    description: 작업공간 멤버 관리 엔드포인트
  - name: WorkspaceInvitation
    description: 작업공간 초대 관리 엔드포인트
  - name: Board
    description: 보드 관리 엔드포인트
  - name: List
    description: 리스트 관리 엔드포인트
  - name: Card
    description: 카드 관리 엔드포인트
  - name: Label
    description: 라벨 관리 엔드포인트
  - name: Attachment
    description: 첨부파일 관리 엔드포인트
  - name: Comment
    description: 댓글 관리 엔드포인트
  - name: Checklist
    description: 체크리스트 관리 엔드포인트
  - name: ChecklistItem
    description: 체크리스트 항목 관리 엔드포인트
components:
  securitySchemes:
    OperationBased:
      type: oauth2
      description: Trello Clone OAuth2 인증 시스템
      flows:
        authorizationCode:
          authorizationUrl: 'https://api.trelloclone.com/v1/oauth2/authorize'
          tokenUrl: 'https://api.trelloclone.com/v1/oauth2/token'
          refreshUrl: 'https://api.trelloclone.com/v1/oauth2/refresh'
          scopes:
            read_trello: 읽기 권한
            write_trello: 쓰기 권한
  schemas:
    Account:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/AccountId'
        username:
          type: string
        email:
          type: string
          format: email
        fullName:
          type: string
        profileImage:
          type: string
          format: uri
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Workspace:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/WorkspaceId'
        name:
          type: string
        description:
          type: string
        ownerId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    WorkspaceMember:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/AccountId'
        workspaceId:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        role:
          type: string
          enum:
            - ADMIN
            - MEMBER
            - VIEWER
        joinedAt:
          type: string
          format: date-time
    Board:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/BoardId'
        workspaceId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        background:
          type: string
        isPublic:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    List:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ListId'
        boardId:
          type: string
          format: uuid
        name:
          type: string
        position:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Card:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/CardId'
        listId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        position:
          type: integer
        dueDate:
          type: string
          format: date-time
        coverImage:
          type: string
          format: uri
        isArchived:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Label:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/LabelId'
        boardId:
          type: string
          format: uuid
        name:
          type: string
        color:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Attachment:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/AttachmentId'
        cardId:
          $ref: '#/components/schemas/CardId'
        name:
          type: string
        url:
          type: string
          format: uri
        fileType:
          type: string
        size:
          type: integer
        uploadedAt:
          type: string
          format: date-time
    Comment:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/CommentId'
        cardId:
          $ref: '#/components/schemas/CardId'
        accountId:
          $ref: '#/components/schemas/AccountId'
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Checklist:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ChecklistId'
        cardId:
          $ref: '#/components/schemas/CardId'
        title:
          type: string
        position:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ChecklistItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ChecklistItemId'
        checklistId:
          $ref: '#/components/schemas/ChecklistId'
        content:
          type: string
        isCompleted:
          type: boolean
        position:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    WorkspaceInvitation:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/WorkspaceId'
        workspaceId:
          $ref: '#/components/schemas/WorkspaceId'
        email:
          type: string
          format: email
        role:
          type: string
          enum:
            - ADMIN
            - MEMBER
            - VIEWER
        status:
          type: string
          enum:
            - PENDING
            - ACCEPTED
            - DECLINED
            - EXPIRED
        invitedBy:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
    AccountId:
      type: string
      format: uuid
    WorkspaceId:
      type: string
      format: uuid
    BoardId:
      type: string
      format: uuid
    ListId:
      type: string
      format: uuid
    CardId:
      type: string
      format: uuid
    LabelId:
      type: string
      format: uuid
    AttachmentId:
      type: string
      format: uuid
    CommentId:
      type: string
      format: uuid
    ChecklistId:
      type: string
      format: uuid
    ChecklistItemId:
      type: string
      format: uuid
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: OAuth2 액세스 토큰
        token_type:
          type: string
          enum:
            - bearer
          description: 토큰 타입
        expires_in:
          type: integer
          description: 토큰 만료 시간(초)
        refresh_token:
          type: string
          description: 리프레시 토큰
        scope:
          type: string
          description: 허용된 스코프
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: 에러 코드
        error_description:
          type: string
          description: 에러 상세 설명
        error_uri:
          type: string
          format: uri
          description: 에러 관련 문서 URI
paths:
  /oauth2/authorize:
    get:
      summary: OAuth2 인증 요청
      description: 클라이언트가 사용자 인증을 요청합니다.
      operationId: authorize
      tags:
        - Auth
      parameters:
        - name: response_type
          in: query
          required: true
          description: 응답 유형 (code 또는 token)
          schema:
            type: string
            enum:
              - code
              - token
        - name: client_id
          in: query
          required: true
          description: 클라이언트 식별자
          schema:
            type: string
        - name: redirect_uri
          in: query
          required: true
          description: 인증 후 리디렉션할 URI
          schema:
            type: string
            format: uri
        - name: scope
          in: query
          required: false
          description: 요청하는 권한 범위
          schema:
            type: string
        - name: state
          in: query
          required: false
          description: 클라이언트 상태 (CSRF 방지)
          schema:
            type: string
      responses:
        '302':
          description: 인증 코드 또는 토큰과 함께 리디렉션
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: 리디렉션 URL (인증 코드 또는 토큰 포함)
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
  /oauth2/token:
    post:
      summary: 액세스 토큰 발급
      description: 인증 코드를 액세스 토큰으로 교환합니다.
      operationId: token
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
                - client_id
              properties:
                grant_type:
                  type: string
                  enum:
                    - authorization_code
                    - refresh_token
                    - client_credentials
                  description: 그랜트 타입
                code:
                  type: string
                  description: 인증 코드 (grant_type이 authorization_code인 경우 필수)
                redirect_uri:
                  type: string
                  format: uri
                  description: 리디렉션 URI (인증 코드 발급 시 사용한 값과 동일해야 함)
                client_id:
                  type: string
                  description: 클라이언트 식별자
                client_secret:
                  type: string
                  description: 클라이언트 비밀키
                refresh_token:
                  type: string
                  description: 리프레시 토큰 (grant_type이 refresh_token인 경우 필수)
      responses:
        '200':
          description: 액세스 토큰 발급 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
  /oauth2/refresh:
    post:
      summary: 액세스 토큰 갱신
      description: 리프레시 토큰을 사용해 액세스 토큰을 갱신합니다.
      operationId: refresh
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
                - refresh_token
                - client_id
              properties:
                grant_type:
                  type: string
                  enum:
                    - refresh_token
                  description: 그랜트 타입 (항상 refresh_token)
                refresh_token:
                  type: string
                  description: 리프레시 토큰
                client_id:
                  type: string
                  description: 클라이언트 식별자
                client_secret:
                  type: string
                  description: 클라이언트 비밀키
      responses:
        '200':
          description: 액세스 토큰 갱신 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
  /oauth2/revoke:
    post:
      summary: 토큰 폐기
      description: 액세스 토큰 또는 리프레시 토큰을 폐기합니다.
      operationId: revoke
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - token
                - client_id
              properties:
                token:
                  type: string
                  description: 폐기할 토큰
                token_type_hint:
                  type: string
                  enum:
                    - access_token
                    - refresh_token
                  description: 토큰 타입
                client_id:
                  type: string
                  description: 클라이언트 식별자
                client_secret:
                  type: string
                  description: 클라이언트 비밀키
      responses:
        '200':
          description: 토큰 폐기 성공
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
  /account/me:
    get:
      summary: 현재 계정 정보 조회
      description: 인증된 계정의 정보를 반환합니다.
      operationId: getMe
      tags:
        - Account
      security:
        - OperationBased:
            - read_trello
      responses:
        '200':
          description: 계정 정보 반환 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
    put:
      summary: 계정 정보 수정
      description: 현재 계정의 정보를 수정합니다.
      operationId: updateMe
      tags:
        - Account
      security:
        - OperationBased:
            - write_trello
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  description: 이름
                profileImage:
                  type: string
                  format: uri
                  description: 프로필 이미지 URL
      responses:
        '200':
          description: 계정 정보 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
  '/accounts/{accountId}':
    get:
      summary: 계정 정보 조회
      description: 특정 계정의 정보를 조회합니다.
      operationId: getAccount
      tags:
        - Account
      security:
        - OperationBased:
            - read_trello
      parameters:
        - name: accountId
          in: path
          required: true
          description: 계정 ID
          schema:
            $ref: '#/components/schemas/AccountId'
      responses:
        '200':
          description: 계정 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  /auth/signup:
    post:
      summary: 회원 가입
      description: 새로운 계정을 생성합니다.
      operationId: signup
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  description: 사용자 아이디
                email:
                  type: string
                  format: email
                  description: 이메일 주소
                password:
                  type: string
                  description: 비밀번호
                fullName:
                  type: string
                  description: 이름
                profileImage:
                  type: string
                  format: uri
                  description: 프로필 이미지 URL
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: 잘못된 요청 또는 이미 존재하는 이메일/사용자명
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/verify-email:
    post:
      summary: 이메일 인증
      description: 회원가입시 발송된 인증 코드로 이메일을 인증합니다.
      operationId: verifyEmail
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - verificationCode
              properties:
                email:
                  type: string
                  format: email
                  description: 인증할 이메일
                verificationCode:
                  type: string
                  description: 이메일로 전송된 인증 코드
      responses:
        '200':
          description: 이메일 인증 성공
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '404':
          description: 해당 이메일 또는 인증 코드를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/forgot-password:
    post:
      summary: 비밀번호 재설정 요청
      description: 비밀번호 재설정 링크를 이메일로 전송합니다.
      operationId: forgotPassword
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: 비밀번호를 재설정할 계정의 이메일
      responses:
        '200':
          description: 비밀번호 재설정 링크 전송 성공
        '404':
          description: 해당 이메일을 가진 계정을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/reset-password:
    post:
      summary: 비밀번호 재설정
      description: 새로운 비밀번호를 설정합니다.
      operationId: resetPassword
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - resetToken
                - newPassword
              properties:
                resetToken:
                  type: string
                  description: 비밀번호 재설정 토큰 (이메일 링크에서 추출)
                newPassword:
                  type: string
                  format: password
                  description: 새로운 비밀번호
      responses:
        '200':
          description: 비밀번호 재설정 성공
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '404':
          description: 유효하지 않거나 만료된 재설정 토큰
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /workspaces:
    get:
      summary: 작업공간 목록 조회
      description: 계정의 모든 작업공간 목록을 조회합니다.
      tags:
        - Workspace
      security:
        - OperationBased:
            - read_trello
      operationId: getWorkspaces
      responses:
        '200':
          description: 작업공간 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workspace'
        '401':
          description: 인증 필요
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: 작업공간 생성
      description: 새로운 작업공간을 생성합니다.
      tags:
        - Workspace
      security:
        - OperationBased:
            - write_trello
      operationId: createWorkspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: 작업공간 이름
                description:
                  type: string
                  description: 작업공간 설명
      responses:
        '201':
          description: 작업공간 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
  '/workspaces/{workspaceId}':
    get:
      summary: 작업공간 상세 조회
      description: 특정 작업공간의 상세 정보를 조회합니다.
      tags:
        - Workspace
      security:
        - OperationBased:
            - read_trello
      operationId: getWorkspace
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: 작업공간 ID
          schema:
            $ref: '#/components/schemas/WorkspaceId'
      responses:
        '200':
          description: 작업공간 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    put:
      summary: 작업공간 수정
      description: 특정 작업공간의 정보를 수정합니다.
      tags:
        - Workspace
      security:
        - OperationBased:
            - write_trello
      operationId: updateWorkspace
      parameters:
        - $ref: '#/paths/~1workspaces~1%7BworkspaceId%7D/get/parameters/0'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 작업공간 이름
                description:
                  type: string
                  description: 작업공간 설명
      responses:
        '200':
          description: 작업공간 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    delete:
      summary: 작업공간 삭제
      description: 특정 작업공간을 삭제합니다.
      tags:
        - Workspace
      security:
        - OperationBased:
            - write_trello
      operationId: deleteWorkspace
      parameters:
        - $ref: '#/paths/~1workspaces~1%7BworkspaceId%7D/get/parameters/0'
      responses:
        '204':
          description: 작업공간 삭제 성공
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/workspaces/{workspaceId}/members':
    get:
      summary: 작업공간 멤버 목록 조회
      description: 특정 작업공간의 모든 멤버 목록을 조회합니다.
      tags:
        - WorkspaceMember
      security:
        - OperationBased:
            - read_trello
      operationId: getWorkspaceMembers
      parameters:
        - $ref: '#/paths/~1workspaces~1%7BworkspaceId%7D/get/parameters/0'
      responses:
        '200':
          description: 멤버 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/WorkspaceMember'
                    - type: object
                      properties:
                        account:
                          $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    post:
      summary: 작업공간 멤버 초대
      description: 특정 작업공간에 새 멤버를 초대합니다.
      tags:
        - WorkspaceMember
      security:
        - OperationBased:
            - write_trello
      operationId: inviteWorkspaceMember
      parameters:
        - $ref: '#/paths/~1workspaces~1%7BworkspaceId%7D/get/parameters/0'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - role
              properties:
                email:
                  type: string
                  format: email
                  description: 초대할 사용자 이메일
                role:
                  type: string
                  enum:
                    - ADMIN
                    - MEMBER
                    - VIEWER
                  description: 부여할 권한
      responses:
        '201':
          description: 멤버 초대 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceInvitation'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/workspaces/{workspaceId}/members/{memberId}':
    get:
      summary: 작업공간 멤버 상세 조회
      description: 특정 작업공간 멤버의 상세 정보를 조회합니다.
      tags:
        - WorkspaceMember
      security:
        - OperationBased:
            - read_trello
      operationId: getWorkspaceMember
      parameters:
        - $ref: '#/paths/~1workspaces~1%7BworkspaceId%7D/get/parameters/0'
        - name: memberId
          in: path
          required: true
          description: 멤버 ID
          schema:
            $ref: '#/components/schemas/AccountId'
      responses:
        '200':
          description: 멤버 조회 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/WorkspaceMember'
                  - type: object
                    properties:
                      account:
                        $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    put:
      summary: 작업공간 멤버 권한 수정
      description: 특정 작업공간 멤버의 권한을 수정합니다.
      tags:
        - WorkspaceMember
      security:
        - OperationBased:
            - write_trello
      operationId: updateWorkspaceMemberRole
      parameters:
        - $ref: '#/paths/~1workspaces~1%7BworkspaceId%7D/get/parameters/0'
        - $ref: '#/paths/~1workspaces~1%7BworkspaceId%7D~1members~1%7BmemberId%7D/get/parameters/1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
              properties:
                role:
                  type: string
                  enum:
                    - ADMIN
                    - MEMBER
                    - VIEWER
                  description: 수정할 권한
      responses:
        '200':
          description: 권한 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceMember'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    delete:
      summary: 작업공간 멤버 제거
      description: 특정 작업공간에서 멤버를 제거합니다.
      tags:
        - WorkspaceMember
      security:
        - OperationBased:
            - write_trello
      operationId: removeWorkspaceMember
      parameters:
        - $ref: '#/paths/~1workspaces~1%7BworkspaceId%7D/get/parameters/0'
        - $ref: '#/paths/~1workspaces~1%7BworkspaceId%7D~1members~1%7BmemberId%7D/get/parameters/1'
      responses:
        '204':
          description: 멤버 제거 성공
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/workspaces/{workspaceId}/invitations':
    get:
      summary: 작업공간 초대 목록 조회
      description: 특정 작업공간의 모든 초대 목록을 조회합니다.
      tags:
        - WorkspaceInvitation
      security:
        - OperationBased:
            - read_trello
      operationId: getWorkspaceInvitations
      parameters:
        - $ref: '#/paths/~1workspaces~1%7BworkspaceId%7D/get/parameters/0'
      responses:
        '200':
          description: 초대 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkspaceInvitation'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/invitations/{invitationId}/accept':
    post:
      summary: 작업공간 초대 수락
      description: 작업공간 초대를 수락합니다.
      tags:
        - WorkspaceInvitation
      security:
        - OperationBased:
            - write_trello
      operationId: acceptInvitation
      parameters:
        - name: invitationId
          in: path
          required: true
          description: 초대 ID
          schema:
            $ref: '#/components/schemas/WorkspaceId'
      responses:
        '200':
          description: 초대 수락 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceMember'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/invitations/{invitationId}/decline':
    post:
      summary: 작업공간 초대 거절
      description: 작업공간 초대를 거절합니다.
      tags:
        - WorkspaceInvitation
      security:
        - OperationBased:
            - write_trello
      operationId: declineInvitation
      parameters:
        - $ref: '#/paths/~1invitations~1%7BinvitationId%7D~1accept/post/parameters/0'
      responses:
        '200':
          description: 초대 거절 성공
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  /account/invitations:
    get:
      summary: 계정 초대 목록 조회
      description: 현재 계정의 모든 초대 목록을 조회합니다.
      tags:
        - WorkspaceInvitation
      security:
        - OperationBased:
            - read_trello
      operationId: getAccountInvitations
      responses:
        '200':
          description: 초대 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  allOf:
                    - $ref: '#/components/schemas/WorkspaceInvitation'
                    - type: object
                      properties:
                        workspace:
                          $ref: '#/components/schemas/Workspace'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
  '/workspaces/{workspaceId}/boards':
    get:
      summary: 보드 목록 조회
      description: 특정 작업공간의 모든 보드 목록을 조회합니다.
      operationId: getBoards
      tags:
        - Board
      security:
        - OperationBased:
            - read_trello
      parameters:
        - $ref: '#/paths/~1workspaces~1%7BworkspaceId%7D/get/parameters/0'
      responses:
        '200':
          description: 보드 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Board'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    post:
      summary: 보드 생성
      description: 특정 작업공간에 새 보드를 생성합니다.
      operationId: createBoard
      tags:
        - Board
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1workspaces~1%7BworkspaceId%7D/get/parameters/0'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: 보드 이름
                description:
                  type: string
                  description: 보드 설명
                background:
                  type: string
                  description: 보드 배경 색상 또는 이미지 URL
                isPublic:
                  type: boolean
                  description: 공개 여부
      responses:
        '201':
          description: 보드 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/boards/{boardId}':
    get:
      summary: 보드 상세 조회
      description: 특정 보드의 상세 정보를 조회합니다.
      operationId: getBoard
      tags:
        - Board
      security:
        - OperationBased:
            - read_trello
      parameters:
        - name: boardId
          in: path
          required: true
          description: 보드 ID
          schema:
            $ref: '#/components/schemas/BoardId'
      responses:
        '200':
          description: 보드 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    put:
      summary: 보드 수정
      description: 특정 보드의 정보를 수정합니다.
      operationId: updateBoard
      tags:
        - Board
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1boards~1%7BboardId%7D/get/parameters/0'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 보드 이름
                description:
                  type: string
                  description: 보드 설명
                background:
                  type: string
                  description: 보드 배경 색상 또는 이미지 URL
                isPublic:
                  type: boolean
                  description: 공개 여부
      responses:
        '200':
          description: 보드 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    delete:
      summary: 보드 삭제
      description: 특정 보드를 삭제합니다.
      operationId: deleteBoard
      tags:
        - Board
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1boards~1%7BboardId%7D/get/parameters/0'
      responses:
        '204':
          description: 보드 삭제 성공
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/boards/{boardId}/labels':
    get:
      summary: 라벨 목록 조회
      description: 특정 보드의 모든 라벨 목록을 조회합니다.
      operationId: getLabels
      tags:
        - Label
      security:
        - OperationBased:
            - read_trello
      parameters:
        - $ref: '#/paths/~1boards~1%7BboardId%7D/get/parameters/0'
      responses:
        '200':
          description: 라벨 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    post:
      summary: 라벨 생성
      description: 특정 보드에 새 라벨을 생성합니다.
      operationId: createLabel
      tags:
        - Label
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1boards~1%7BboardId%7D/get/parameters/0'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - color
              properties:
                name:
                  type: string
                  description: 라벨 이름
                color:
                  type: string
                  description: 라벨 색상 코드
      responses:
        '201':
          description: 라벨 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/boards/{boardId}/lists':
    get:
      operationId: getLists
      summary: 리스트 목록 조회
      description: 특정 보드의 모든 리스트 목록을 조회합니다.
      tags:
        - List
      security:
        - OperationBased:
            - read_trello
      parameters:
        - $ref: '#/paths/~1boards~1%7BboardId%7D/get/parameters/0'
      responses:
        '200':
          description: 리스트 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/List'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    post:
      operationId: createList
      summary: 리스트 생성
      description: 특정 보드에 새 리스트를 생성합니다.
      tags:
        - List
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1boards~1%7BboardId%7D/get/parameters/0'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: 리스트 이름
                position:
                  type: integer
                  description: 리스트 위치 (기본값은 가장 마지막)
      responses:
        '201':
          description: 리스트 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/boards/{boardId}/lists/positions':
    put:
      operationId: updateListPositions
      summary: 리스트 위치 일괄 수정
      description: 특정 보드의 여러 리스트 위치를 한 번에 수정합니다.
      tags:
        - List
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1boards~1%7BboardId%7D/get/parameters/0'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - listPositions
              properties:
                listPositions:
                  type: array
                  items:
                    type: object
                    required:
                      - id
                      - position
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: 리스트 ID
                      position:
                        type: integer
                        description: 리스트 새 위치
      responses:
        '200':
          description: 리스트 위치 수정 성공
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/lists/{listId}':
    get:
      operationId: getList
      summary: 리스트 상세 조회
      description: 특정 리스트의 상세 정보를 조회합니다.
      tags:
        - List
      security:
        - OperationBased:
            - read_trello
      parameters:
        - name: listId
          in: path
          required: true
          description: 리스트 ID
          schema:
            $ref: '#/components/schemas/ListId'
      responses:
        '200':
          description: 리스트 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          description: 권한 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 리소스를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      operationId: updateList
      summary: 리스트 수정
      description: 특정 리스트의 정보를 수정합니다.
      tags:
        - List
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1lists~1%7BlistId%7D/get/parameters/0'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 리스트 이름
                position:
                  type: integer
                  description: 리스트 위치
      responses:
        '200':
          description: 리스트 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    delete:
      operationId: deleteList
      summary: 리스트 삭제
      description: 특정 리스트를 삭제합니다.
      tags:
        - List
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1lists~1%7BlistId%7D/get/parameters/0'
      responses:
        '204':
          description: 리스트 삭제 성공
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/lists/{listId}/cards':
    get:
      summary: 카드 목록 조회
      description: 특정 리스트의 모든 카드 목록을 조회합니다.
      operationId: getCards
      tags:
        - Card
      security:
        - OperationBased:
            - read_trello
      parameters:
        - $ref: '#/paths/~1lists~1%7BlistId%7D/get/parameters/0'
      responses:
        '200':
          description: 카드 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/lists/{listId}/cards/positions':
    put:
      summary: 카드 위치 일괄 수정
      description: 특정 리스트의 여러 카드 위치를 한 번에 수정합니다.
      operationId: updateCardPositions
      tags:
        - Card
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1lists~1%7BlistId%7D/get/parameters/0'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cardPositions
              properties:
                cardPositions:
                  type: array
                  items:
                    type: object
                    required:
                      - id
                      - position
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: 카드 ID
                      position:
                        type: integer
                        description: 카드 새 위치
      responses:
        '200':
          description: 카드 위치 수정 성공
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/cards/{cardId}':
    get:
      summary: 카드 상세 조회
      description: 특정 카드의 상세 정보를 조회합니다.
      operationId: getCard
      tags:
        - Card
      security:
        - OperationBased:
            - read_trello
      parameters:
        - name: cardId
          in: path
          required: true
          description: 카드 ID
          schema:
            $ref: '#/components/schemas/CardId'
      responses:
        '200':
          description: 카드 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    put:
      summary: 카드 수정
      description: 특정 카드의 정보를 수정합니다.
      operationId: updateCard
      tags:
        - Card
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1cards~1%7BcardId%7D/get/parameters/0'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 카드 제목
                description:
                  type: string
                  description: 카드 설명
                position:
                  type: integer
                  description: 카드 위치
                dueDate:
                  type: string
                  format: date-time
                  description: 카드 마감일
                coverImage:
                  type: string
                  format: uri
                  description: 카드 커버 이미지 URL
                isArchived:
                  type: boolean
                  description: 카드 보관 여부
      responses:
        '200':
          description: 카드 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    delete:
      summary: 카드 삭제
      description: 특정 카드를 삭제합니다.
      operationId: deleteCard
      tags:
        - Card
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1cards~1%7BcardId%7D/get/parameters/0'
      responses:
        '204':
          description: 카드 삭제 성공
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/cards/{cardId}/move':
    put:
      summary: 카드 이동
      description: 특정 카드를 다른 리스트로 이동합니다.
      operationId: moveCard
      tags:
        - Card
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1cards~1%7BcardId%7D/get/parameters/0'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - listId
              properties:
                listId:
                  type: string
                  format: uuid
                  description: 이동할 리스트 ID
                position:
                  type: integer
                  description: 이동할 위치 (기본값은 가장 마지막)
      responses:
        '200':
          description: 카드 이동 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/cards/{cardId}/labels/{labelId}':
    post:
      summary: 카드에 라벨 추가
      description: 특정 카드에 라벨을 추가합니다.
      operationId: addLabel
      tags:
        - Label
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1cards~1%7BcardId%7D/get/parameters/0'
        - $ref: '#/paths/~1labels~1%7BlabelId%7D/put/parameters/0'
      responses:
        '201':
          description: 라벨 추가 성공
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    delete:
      summary: 카드에서 라벨 제거
      description: 특정 카드에서 라벨을 제거합니다.
      operationId: removeLabel
      tags:
        - Label
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1cards~1%7BcardId%7D/get/parameters/0'
        - $ref: '#/paths/~1labels~1%7BlabelId%7D/put/parameters/0'
      responses:
        '204':
          description: 라벨 제거 성공
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/cards/{cardId}/attachments':
    get:
      summary: 첨부파일 목록 조회
      description: 특정 카드의 모든 첨부파일 목록을 조회합니다.
      operationId: getAttachments
      tags:
        - Attachment
      security:
        - OperationBased:
            - read_trello
      parameters:
        - $ref: '#/paths/~1cards~1%7BcardId%7D/get/parameters/0'
      responses:
        '200':
          description: 첨부파일 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attachment'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    post:
      summary: 첨부파일 업로드
      description: 특정 카드에 새 첨부파일을 업로드합니다.
      operationId: uploadAttachment
      tags:
        - Attachment
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1cards~1%7BcardId%7D/get/parameters/0'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: 업로드할 파일
                name:
                  type: string
                  description: 첨부파일 이름 (제공하지 않으면 파일명 사용)
      responses:
        '201':
          description: 첨부파일 업로드 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/cards/{cardId}/comments':
    get:
      summary: 댓글 목록 조회
      description: 특정 카드의 모든 댓글 목록을 조회합니다.
      operationId: getComments
      tags:
        - Comment
      security:
        - OperationBased:
            - read_trello
      parameters:
        - $ref: '#/paths/~1cards~1%7BcardId%7D/get/parameters/0'
      responses:
        '200':
          description: 댓글 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Comment'
                    - type: object
                      properties:
                        account:
                          $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    post:
      summary: 댓글 작성
      description: 특정 카드에 새 댓글을 작성합니다.
      operationId: createComment
      tags:
        - Comment
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1cards~1%7BcardId%7D/get/parameters/0'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: 댓글 내용
      responses:
        '201':
          description: 댓글 작성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/cards/{cardId}/checklists':
    get:
      summary: 체크리스트 목록 조회
      description: 특정 카드의 모든 체크리스트 목록을 조회합니다.
      operationId: getChecklists
      tags:
        - Checklist
      security:
        - OperationBased:
            - read_trello
      parameters:
        - $ref: '#/paths/~1cards~1%7BcardId%7D/get/parameters/0'
      responses:
        '200':
          description: 체크리스트 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Checklist'
                    - type: object
                      properties:
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/ChecklistItem'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    post:
      summary: 체크리스트 생성
      description: 특정 카드에 새 체크리스트를 생성합니다.
      operationId: createChecklist
      tags:
        - Checklist
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1cards~1%7BcardId%7D/get/parameters/0'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  description: 체크리스트 제목
                position:
                  type: integer
                  description: 체크리스트 위치 (기본값은 가장 마지막)
      responses:
        '201':
          description: 체크리스트 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Checklist'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/labels/{labelId}':
    put:
      summary: 라벨 수정
      description: 특정 라벨의 정보를 수정합니다.
      operationId: updateLabel
      tags:
        - Label
      security:
        - OperationBased:
            - write_trello
      parameters:
        - name: labelId
          in: path
          required: true
          description: 라벨 ID
          schema:
            $ref: '#/components/schemas/LabelId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 라벨 이름
                color:
                  type: string
                  description: 라벨 색상 코드
      responses:
        '200':
          description: 라벨 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    delete:
      summary: 라벨 삭제
      description: 특정 라벨을 삭제합니다.
      operationId: deleteLabel
      tags:
        - Label
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1labels~1%7BlabelId%7D/put/parameters/0'
      responses:
        '204':
          description: 라벨 삭제 성공
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/attachments/{attachmentId}':
    delete:
      summary: 첨부파일 삭제
      description: 특정 첨부파일을 삭제합니다.
      operationId: deleteAttachment
      tags:
        - Attachment
      security:
        - OperationBased:
            - write_trello
      parameters:
        - name: attachmentId
          in: path
          required: true
          description: 첨부파일 ID
          schema:
            $ref: '#/components/schemas/AttachmentId'
      responses:
        '204':
          description: 첨부파일 삭제 성공
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/comments/{commentId}':
    put:
      summary: 댓글 수정
      description: 특정 댓글을 수정합니다.
      operationId: updateComment
      tags:
        - Comment
      security:
        - OperationBased:
            - write_trello
      parameters:
        - name: commentId
          in: path
          required: true
          description: 댓글 ID
          schema:
            $ref: '#/components/schemas/CommentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: 수정할 댓글 내용
      responses:
        '200':
          description: 댓글 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    delete:
      summary: 댓글 삭제
      description: 특정 댓글을 삭제합니다.
      operationId: deleteComment
      tags:
        - Comment
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1comments~1%7BcommentId%7D/put/parameters/0'
      responses:
        '204':
          description: 댓글 삭제 성공
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/checklists/{checklistId}':
    put:
      summary: 체크리스트 수정
      description: 특정 체크리스트의 정보를 수정합니다.
      operationId: updateChecklist
      tags:
        - Checklist
      security:
        - OperationBased:
            - write_trello
      parameters:
        - name: checklistId
          in: path
          required: true
          description: 체크리스트 ID
          schema:
            $ref: '#/components/schemas/ChecklistId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 체크리스트 제목
                position:
                  type: integer
                  description: 체크리스트 위치
      responses:
        '200':
          description: 체크리스트 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Checklist'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    delete:
      summary: 체크리스트 삭제
      description: 특정 체크리스트를 삭제합니다.
      operationId: deleteChecklist
      tags:
        - Checklist
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1checklists~1%7BchecklistId%7D/put/parameters/0'
      responses:
        '204':
          description: 체크리스트 삭제 성공
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/checklists/{checklistId}/items':
    get:
      summary: 체크리스트 항목 목록 조회
      description: 특정 체크리스트의 모든 항목 목록을 조회합니다.
      operationId: getChecklistItems
      tags:
        - ChecklistItem
      security:
        - OperationBased:
            - read_trello
      parameters:
        - $ref: '#/paths/~1checklists~1%7BchecklistId%7D/put/parameters/0'
      responses:
        '200':
          description: 체크리스트 항목 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChecklistItem'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    post:
      summary: 체크리스트 항목 생성
      description: 특정 체크리스트에 새 항목을 생성합니다.
      operationId: createChecklistItem
      tags:
        - ChecklistItem
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1checklists~1%7BchecklistId%7D/put/parameters/0'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: 체크리스트 항목 내용
                isCompleted:
                  type: boolean
                  description: 완료 여부
                position:
                  type: integer
                  description: 항목 위치 (기본값은 가장 마지막)
      responses:
        '201':
          description: 체크리스트 항목 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChecklistItem'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/checklists/{checklistId}/items/positions':
    put:
      summary: 체크리스트 항목 위치 일괄 수정
      description: 특정 체크리스트의 여러 항목 위치를 한 번에 수정합니다.
      operationId: updateChecklistItemPositions
      tags:
        - ChecklistItem
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1checklists~1%7BchecklistId%7D/put/parameters/0'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - itemPositions
              properties:
                itemPositions:
                  type: array
                  items:
                    type: object
                    required:
                      - id
                      - position
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: 체크리스트 항목 ID
                      position:
                        type: integer
                        description: 항목 새 위치
      responses:
        '200':
          description: 체크리스트 항목 위치 수정 성공
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
  '/checklist-items/{itemId}':
    put:
      summary: 체크리스트 항목 수정
      description: 특정 체크리스트 항목을 수정합니다.
      operationId: updateChecklistItem
      tags:
        - ChecklistItem
      security:
        - OperationBased:
            - write_trello
      parameters:
        - name: itemId
          in: path
          required: true
          description: 체크리스트 항목 ID
          schema:
            $ref: '#/components/schemas/ChecklistItemId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: 체크리스트 항목 내용
                isCompleted:
                  type: boolean
                  description: 완료 여부
                position:
                  type: integer
                  description: 항목 위치
      responses:
        '200':
          description: 체크리스트 항목 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChecklistItem'
        '400':
          $ref: '#/paths/~1account~1me/put/responses/400'
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
        '404':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/404'
    delete:
      summary: 체크리스트 항목 삭제
      description: 특정 체크리스트 항목을 삭제합니다.
      operationId: deleteChecklistItem
      tags:
        - ChecklistItem
      security:
        - OperationBased:
            - write_trello
      parameters:
        - $ref: '#/paths/~1checklist-items~1%7BitemId%7D/put/parameters/0'
      responses:
        '204':
          description: 체크리스트 항목 삭제 성공
        '401':
          $ref: '#/paths/~1workspaces/get/responses/401'
        '403':
          $ref: '#/paths/~1lists~1%7BlistId%7D/get/responses/403'
