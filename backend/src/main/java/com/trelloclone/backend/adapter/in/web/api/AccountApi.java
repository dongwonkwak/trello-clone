/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.trelloclone.backend.adapter.in.web.api;

import com.trelloclone.backend.adapter.in.web.model.AccountResponse;
import com.trelloclone.backend.adapter.in.web.model.Error;
import com.trelloclone.backend.adapter.in.web.model.PutMeRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.12.0")
@Tag(name = "Account", description = "사용자 계정 관련 API")
public interface AccountApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /v1/accounts/me : 내 정보 조회
     * 내 정보를 조회합니다.
     *
     * @return OK (status code 200)
     *         or Not authorized (status code 401)
     *         or 500 Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getMe",
        summary = "내 정보 조회",
        description = "내 정보를 조회합니다.",
        tags = { "Account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AccountResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Not authorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "500 Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/accounts/me",
        produces = { "application/json" }
    )
    
    default ResponseEntity<?> getMe(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /v1/accounts/me : 내 정보 수정
     * 내 정보를 수정합니다.
     *
     * @param putMeRequest  (required)
     * @return 계정 정보 수정 성공 (status code 200)
     *         or Bad Request (status code 400)
     *         or Not authorized (status code 401)
     */
    @Operation(
        operationId = "putMe",
        summary = "내 정보 수정",
        description = "내 정보를 수정합니다.",
        tags = { "Account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "계정 정보 수정 성공", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AccountResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Not authorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/accounts/me",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<?> putMe(
        @Parameter(name = "PutMeRequest", description = "", required = true) @RequestBody PutMeRequest putMeRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
